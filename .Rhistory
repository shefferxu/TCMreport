LOD<-0.174
t<-0.35
Pollunit<-"mg/kg"
expunit<-"μg/kg bw"
#Pb、Cd、As、Hg、Cu的t值分别为14%、14%、35%、24%、14%.没有Al的转移率t值，根据风险高估，转移率为0.35
# Chunk 3
#--上传数据
TCMPollutantname<-paste(Pollutantname,TCMname,".csv",sep = "")
Consumptionname<-paste(TCMname,".csv",sep = "")
Consumptiondata<-read.csv(Consumptionname,encoding = "UTF-8")
Pollutantdata<-read.csv(TCMPollutantname,encoding = "UTF-8")
abbreviations<-read.csv("缩略语.csv",encoding = "UTF-8")
# Chunk 4
#--提取出需要用到的数据
#1.污染物浓度数据
Poll<-sort(Pollutantdata[,1])
#2.年消费量
ycs<-Consumptiondata[,2]
#3.年摄入天数
day<-Consumptiondata[,3]
#4.日摄入量
daycs<-Consumptiondata[,4]
# Chunk 5
#--消费量的特征描述：年、天、日消费量的P5、P50、P95分位数
#年消费量分位数
ycsquan<-c(quantile(ycs,0.05),quantile(ycs,0.5),quantile(ycs,0.95),round(mean(ycs),1))
#年摄入天数分位数
dayquan<-c(quantile(day,0.05),quantile(day,0.5),quantile(day,0.95),round(mean(day),1))
#日摄入量分位数
daycsquan<-c(quantile(daycs,0.05),quantile(daycs,0.5),quantile(daycs,0.95),round(mean(daycs),1))
AA=c("P5","P50","P95","平均值")
csquantable <- data.frame( BB=ycsquan,
CC=dayquan,
DD=daycsquan,
row.names=NULL,
stringsAsFactors = F)
csquantable<-cbind(AA,csquantable)
colnames(csquantable)<-c("分位数","年摄入量（g/y）","摄入天数（d）","每日摄入量（g/d）")
# Chunk 6
#--根据污染物浓度数据，确定最佳分布，再随机模拟服从该分布的长度为10000的污染物数据
Pollnum<-length(Poll) #污染物浓度数据长度
Pollpos<-Poll[which(Poll!=0)] #阳性污染物浓度数据
Pollposnum<-length(Pollpos)#污染物浓度不为0(即有检出值)长度
#阳性率即检出率
Pp<-round(Pollposnum/Pollnum,4)
Pppercent<-Pp*100
#拟合最佳分布参数****手动 设置从concenn1参数nu和lambda
#descdist(Pollpos,discrete = FALSE)
#fitlnorm<-fitdist(Pollpos,"lnorm",start=list(meanlog = 5.2646368, sdlog = 0.4082))
#fitgamma<-fitdist(Pollpos,"gamma")
#fitexp<-fitdist(Pollpos,"exp")
abc<-fitdist(Pollpos,"lnorm")#说明阳性数据近似服从均值为5.2646，标准差为0.4082的对数正态分布
Pollposmax<-round(max(Pollpos),1)  #最大阳性污染物浓度数值
Pollposp50<-round(quantile(Pollpos,probs = 0.5),1)#阳性污染物浓度数据50%分位数
Pollposp95<-round(quantile(Pollpos,probs = 0.95),1)#阳性污染物浓度数据95%分位数
Pollposmean<-round(mean(Pollpos),1)#阳性污染物浓度数据均值
#随机生成对数服从正态分布的阳性数据
concenn1<-rlnorm(Pp*10000,meanlog =abc[["estimate"]][["meanlog"]], sdlog =abc[["estimate"]][["sdlog"]])
#小于检出限LOD（即，检出值为0）的部分赋值LOD/2
concenun1<-rep(LOD/2,(1-Pp)*10000)
#concenn1<-sort(concenn1)
#获得10000个污染数据
concen<-c(concenun1,concenn1)
newRmd <- paste(Metal,"-",i,"Rmd",sep = ".")
Metal <- "铝"
newRmd <- paste(Metal,"-",i,"Rmd",sep = ".")
newRmd
for(i in TCM){
currRmd <- "铝-金银花"
newRmd <- paste(Metal,"-",i,"Rmd",sep = ".")
file.copy(currRmd,newRmd,overwrite = TRUE)
# srcfile<- paste(i,".Rmd",sep = "")
# outdoc<-paste(getwd(),"output",i,sep = "/")
# outdoc<-paste(outdoc,".doc")
# rmarkdown::render(input = srcfile,output_format="word_document",output_file= outdoc)
}
TCM <- c("黄芪","金银花")
for(i in TCM){
currRmd <- "铝-金银花"
newRmd <- paste(Metal,"-",i,"Rmd",sep = ".")
file.copy(currRmd,newRmd,overwrite = TRUE)
# srcfile<- paste(i,".Rmd",sep = "")
# outdoc<-paste(getwd(),"output",i,sep = "/")
# outdoc<-paste(outdoc,".doc")
# rmarkdown::render(input = srcfile,output_format="word_document",output_file= outdoc)
}
getwd()
newRmd
for(i in TCM){
currRmd <- "铝-金银花"
newRmd <- paste(Metal,"-",i,".Rmd",sep = "")
file.copy(currRmd,newRmd,overwrite = TRUE)
# srcfile<- paste(i,".Rmd",sep = "")
# outdoc<-paste(getwd(),"output",i,sep = "/")
# outdoc<-paste(outdoc,".doc")
# rmarkdown::render(input = srcfile,output_format="word_document",output_file= outdoc)
}
# connect database
# library(RMySQL)
# conn <- dbConnect(MySQL(),user="root",
#                   password="5mayday",
#                   host="localhost",
#                   dbname="ctm",DBMSencoding="UTF8")
# dbSendQuery(conn, "SET NAMES GBK")
# # data clean of tcm name
# t <- which(stringr::str_detect(kq2019$CMN,"薏苡仁"))
# kq2019[t,]$CMN<-"薏苡仁"
# t <- which(stringr::str_detect(kq2019$CMN,"酸枣仁"))
# kq2019[t,]$CMN<-"酸枣仁"
# t <- which(stringr::str_detect(kq2019$CMN,"白术"))
# kq2019[t,]$CMN<-"白术"
# t <- which(stringr::str_detect(kq2019$CMN,"三七"))
# kq2019[t,]$CMN<-"三七"
# t <- which(stringr::str_detect(kq2019$CMN,"丹参"))
# kq2019[t,]$CMN<-"丹参"
# t <- which(stringr::str_detect(kq2019$CMN,"人参"))
# kq2019[t,]$CMN<-"人参"
# t <- which(stringr::str_detect(kq2019$CMN,"枸杞"))
# kq2019[t,]$CMN<-"枸杞"
# t <- which(stringr::str_detect(kq2019$CMN,"金银花"))
# kq2019[t,]$CMN<-"金银花"
# t <- which(stringr::str_detect(kq2019$CMN,"麦冬"))
# kq2019[t,]$CMN<-"麦冬"
# t <- which(stringr::str_detect(kq2019$CMN,"党参"))
# kq2019[t,]$CMN<-"党参"
# t <- which(stringr::str_detect(kq2019$CMN,"延胡索"))
# kq2019[t,]$CMN<-"延胡索"
# t <- which(stringr::str_detect(kq2019$CMN,"山药"))
# kq2019[t,]$CMN<-"山药"
# t <- which(stringr::str_detect(kq2019$CMN,"黄芩"))
# kq2019[t,]$CMN<-"黄芩"
# t <- which(stringr::str_detect(kq2019$CMN,"铁皮石斛"))
# kq2019[t,]$CMN<-"铁皮石斛"
# t <- which(stringr::str_detect(kq2019$CMN,"土鳖虫"))
# kq2019[t,]$CMN<-"土鳖虫"
# t <- which(stringr::str_detect(kq2019$CMN,"菊花"))
# kq2019[t,]$CMN<-"菊花"
# t <- which(stringr::str_detect(kq2019$CMN,"黄芪"))
# kq2019[t,]$CMN<-"黄芪rite.table (kq2019, file ="", sep ="", row.names =TRUE, col.names =TRUE, quote =TRUE)
# import into MySQL Database
# kq2019[, 'Name']  = iconv(kq2019[, 'Name'], from = 'gbk', to = 'utf-8')
# kq2019[, 'CMN']  = iconv(kq2019[, 'CMN'], from = 'gbk', to = 'utf-8')
# dbWriteTable(conn,"kq2019",kq2019,append=TRUE,fileEncoding = "utf8")
# dbDisconnect(conn)
#
# kq2019test <- head(kq2019)
# dbSendQuery(conn, 'SET NAMES utf8')
# kq2019test[, 'Name']  = iconv(kq2019test[, 'Name'], from = 'gbk', to = 'utf-8')
# kq2019test[, 'CMN']  = iconv(kq2019test[, 'CMN'], from = 'gbk', to = 'utf-8')
# data output
library("readxl")
TCM2019 <- NULL
# options( java.parameters = "-Xmx5000m")
# library(xlsx)
Metal <- "铝"
TCM <- c("黄芪","金银花")
for(i in TCM){
currRmd <- "铝-金银花"
newRmd <- paste(Metal,"-",i,".Rmd",sep = "")
file.copy(currRmd,newRmd,overwrite = TRUE)
# srcfile<- paste(i,".Rmd",sep = "")
# outdoc<-paste(getwd(),"output",i,sep = "/")
# outdoc<-paste(outdoc,".doc")
# rmarkdown::render(input = srcfile,output_format="word_document",output_file= outdoc)
}
# library(xlsx)
Metal <- "铝"
TCM <- c("黄芪","金银花")
TCM
currRmd <- "铝-金银花"
newRmd <- paste(Metal,"-",i,".Rmd",sep = "")
newRmd
file.copy(currRmd,newRmd,overwrite = TRUE)
file.copy(currRmd,newRmd)
TCM
for(i in TCM){
currRmd <- "template.Rmd"
newRmd <- paste(Metal,"-",i,".Rmd",sep = "")
file.copy(currRmd,newRmd,overwrite = TRUE)
# srcfile<- paste(i,".Rmd",sep = "")
# outdoc<-paste(getwd(),"output",i,sep = "/")
# outdoc<-paste(outdoc,".doc")
# rmarkdown::render(input = srcfile,output_format="word_document",output_file= outdoc)
}
# setwd("E:/deltawork/TCM data/数据分析结果/2019虹桥 康桥 万仕城/以医院姓名、手机号姓名和姓名为唯一性识别号")
# data_frame_names <- list.files(pattern = "*.csv")       # Get all file names
# data_frame_names <- data_frame_names[-5]                                    # Return file names to console
library("readxl")
# TCM2019 <- NULL
# options( java.parameters = "-Xmx5000m")
# library(xlsx)
Metal <- "铝"
TCM <- c("黄芪","金银花")
for(i in TCM){
currRmd <- "template.Rmd"
newRmd <- paste(Metal,"-",i,".Rmd",sep = "")
file.copy(currRmd,newRmd,overwrite = TRUE)
# srcfile<- paste(i,".Rmd",sep = "")
# outdoc<-paste(getwd(),"output",i,sep = "/")
# outdoc<-paste(outdoc,".doc")
# rmarkdown::render(input = srcfile,output_format="word_document",output_file= outdoc)
}
# setwd("E:/deltawork/TCM data/数据分析结果/2019虹桥 康桥 万仕城/以医院姓名、手机号姓名和姓名为唯一性识别号")
# data_frame_names <- list.files(pattern = "*.csv")       # Get all file names
# data_frame_names <- data_frame_names[-5]                                    # Return file names to console
library("readxl")
# TCM2019 <- NULL
# options( java.parameters = "-Xmx5000m")
# library(xlsx)
Metal <- "铝"
TCM <- c("黄芪","金银花")
for(i in TCM){
currRmd <- "template.Rmd"
newRmd <- paste(Metal,"-",i,".Rmd",sep = "")
file.copy(currRmd,newRmd,overwrite = TRUE)
# 渲染RMD文件并导出Word文件
srcfile <- newRmd
outdoc <- paste(Metal, "-", i, ".docx", sep = "")
rmarkdown::render(input = srcfile, output_format = "word_document", output_file = outdoc)
}
# Chunk 1: setup
library(reshape2)
library(flextable)
library(GGally)
library(factoextra)
library(FactoMineR)
library(fitdistrplus)
library(MASS)
library(survival)
library(npsurv)
library(lsei)
library(SuppDists)
knitr::opts_chunk$set(echo = FALSE,warning=FALSE, message=FALSE)
# Chunk 2
#--设置污染物名称、食药物质名称、污染物的LOD值、转移率以及单位等
CurrentName <- knitr::current_input()
CurrentName <- "铝-金银花.Rmd" #需注释需注释需注释
CurrentName <- sub(".Rmd","",CurrentName)
Pollutantname<-gsub("-.*", "", CurrentName)
TCMname<-gsub(".*-", "", CurrentName)
LOD<-0.174
t<-0.35
Pollunit<-"mg/kg"
expunit<-"μg/kg bw"
#Pb、Cd、As、Hg、Cu的t值分别为14%、14%、35%、24%、14%.没有Al的转移率t值，根据风险高估，转移率为0.35
TCMPollutantname<-paste(Pollutantname,TCMname,".csv",sep = "")
Consumptionname<-paste("./Consum/",TCMname,".csv",sep = "")
Consumptionname
Consumptiondata<-read.csv(Consumptionname,encoding = "UTF-8")
Consumptiondata
Consumptiondata<-read.csv(Consumptionname,encoding = "UTF-8")
Pollutantdata<-read.csv(paste0("Poll",TCMPollutantname),encoding = "UTF-8")
Consumptiondata<-read.csv(Consumptionname,encoding = "UTF-8")
Pollutantdata<-read.csv(paste0("./Poll/",TCMPollutantname),encoding = "UTF-8")
Consumptiondata<-read.csv(Consumptionname,encoding = "UTF-8")
Pollutantdata<-read.csv(paste0("./Poll/",TCMPollutantname),encoding = "UTF-8")
Pollutantdata
abbreviations<-read.csv("缩略语.csv",encoding = "UTF-8")
mypath<-dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(mypath)
mypath
rmd_file <- "template.Rmd"
content <- readLines(rmd_file)
content
content <- readLines(rmd_file, encoding = "UTF-8")
content
# 找到在哪个位置添加新模块
newpage_index <- grep("\\# Newpage", content)
# 找到在哪个位置添加新模块
newpage_index <- grep("\\# Newpage", content)
newpage_index
# 找到在哪个位置添加新模块
newpage_index <- grep("\\# newpage", content)
newpage_index
newpage_index <- grep("\\newpage", content)
newpage_index
newpage_index <- grep("newpage", content)
newpage_index
third_newpage_index <- newpage_indices[3]
third_newpage_index
# 找到在哪个位置添加新模块
newpage_index <- grep("newpage", content)
third_newpage_index <- newpage_indices[3]
newpage_index
third_newpage_index <- newpage_index[3]
third_newpage_index
for (metal in Metal) {
for (herb in TCM) {
currRmd <- "template.Rmd"
newRmd <- paste(metal, "-", herb, ".Rmd", sep = "")
file.copy(currRmd, newRmd, overwrite = TRUE)
content <- readLines(newRmd, encoding = "UTF-8")
# 找到在哪个位置添加新模块
newpage_index <- grep("newpage", content)
third_newpage_index <- newpage_index[3]
# 渲染RMD文件并导出Word文件
# srcfile <- newRmd
# outdoc <- paste(metal, "-", herb, ".docx", sep = "")
# rmarkdown::render(input = srcfile, output_format = "word_document", output_file = outdoc)
}
}
Metal <- c("铝","镉","铬","铅")
TCM <- c("黄芪","金银花","鸡内金")
for (metal in Metal) {
for (herb in TCM) {
currRmd <- "template.Rmd"
newRmd <- paste(metal, "-", herb, ".Rmd", sep = "")
file.copy(currRmd, newRmd, overwrite = TRUE)
content <- readLines(newRmd, encoding = "UTF-8")
# 找到在哪个位置添加新模块
newpage_index <- grep("newpage", content)
third_newpage_index <- newpage_index[3]
# 渲染RMD文件并导出Word文件
# srcfile <- newRmd
# outdoc <- paste(metal, "-", herb, ".docx", sep = "")
# rmarkdown::render(input = srcfile, output_format = "word_document", output_file = outdoc)
}
}
warnings()
content
Metal
metal
herb
currRmd <- "template.Rmd"
newRmd <- paste(metal, "-", herb, ".Rmd", sep = "")
file.copy(currRmd, newRmd, overwrite = TRUE)
content <- readLines(newRmd, encoding = "UTF-8")
newpage_indices <- grep("newpage", content)
newpage_indices
third_newpage_index <- newpage_indices[3]
third_newpage_index
# 在第三个 newpage 之后添加 r child 新模块
new_content <- c(content[1:third_newpage_index],
"```{r child = '金银花介绍.Rmd'}",
"```",
"```{r child = '铝的危害表征.Rmd'}",
"```",
content[(third_newpage_index + 1):length(content)])
newRmd
writeLines(new_content, newRmd, encoding = "UTF-8")
writeLines(new_content, newRmd)
?writeLines
writeLines(new_content, newRmd, useBytes=T)
# 在第三个 newpage 之后添加 r child 新模块
new_content <- c(content[1:third_newpage_index],
"\n```{r child = '金银花介绍.Rmd'}",
"```",
"\n```{r child = '铝的危害表征.Rmd'}",
"```",
content[(third_newpage_index + 1):length(content)])
# 将修改后的内容写回文件
writeLines(new_content, newRmd, useBytes=T)
currRmd <- "template.Rmd"
newRmd <- paste(metal, "-", herb, ".Rmd", sep = "")
file.copy(currRmd, newRmd, overwrite = TRUE)
content <- readLines(newRmd, encoding = "UTF-8")
# 找到第三个 newpage 的位置
newpage_indices <- grep("newpage", content)
third_newpage_index <- newpage_indices[3]
# 在第三个 newpage 之后添加 r child 新模块
new_content <- c(content[1:third_newpage_index],
"\n```{r child = '金银花介绍.Rmd'}\n",
"```",
"\n```{r child = '铝的危害表征.Rmd'}\n",
"```",
content[(third_newpage_index + 1):length(content)])
# 将修改后的内容写回文件
writeLines(new_content, newRmd, useBytes=T)
currRmd <- "template.Rmd"
newRmd <- paste(metal, "-", herb, ".Rmd", sep = "")
file.copy(currRmd, newRmd, overwrite = TRUE)
metal
metal <- "铅"
TCM
TCM <- "鸡内金"
currRmd <- "template.Rmd"
newRmd <- paste(metal, "-", herb, ".Rmd", sep = "")
file.copy(currRmd, newRmd, overwrite = TRUE)
herb <- "鸡内金"
currRmd <- "template.Rmd"
newRmd <- paste(metal, "-", herb, ".Rmd", sep = "")
file.copy(currRmd, newRmd, overwrite = TRUE)
content <- readLines(newRmd, encoding = "UTF-8")
# 找到第三个 newpage 的位置
newpage_indices <- grep("newpage", content)
third_newpage_index <- newpage_indices[3]
# 在第三个 newpage 之后添加 r child 新模块
new_content <- c(content[1:third_newpage_index],
"\n```{r child = '金银花介绍.Rmd'}\n",
"```",
"\n```{r child = '铝的危害表征.Rmd'}\n",
"```",
content[(third_newpage_index + 1):length(content)])
# 将修改后的内容写回文件
writeLines(new_content, newRmd, useBytes=T)
currRmd <- "template.Rmd"
newRmd <- paste(metal, "-", herb, ".Rmd", sep = "")
file.copy(currRmd, newRmd, overwrite = TRUE)
content <- readLines(newRmd, encoding = "UTF-8")
# 找到第三个 newpage 的位置
newpage_indices <- grep("newpage", content)
third_newpage_index <- newpage_indices[3]
# 在第三个 newpage 之后添加 r child 新模块
new_content <- c(content[1:third_newpage_index],
"\n```{r child = '金银花介绍.Rmd'}\n",
"```",
"\n```{r child = '铝的危害表征.Rmd'}\n",
"```",
content[(third_newpage_index + 1):length(content)])
# 将修改后的内容写回文件
writeLines(new_content, newRmd)
txt <- "在"
writeLines(txt, "test.txt", useBytes=T)
readLines("test.txt", encoding="UTF-8")
txt <- "在"
writeLines(txt, "test.txt", useBytes=T)
readLines("test.txt", encoding="UTF-8")
txt <- "在"
writeLines(txt, "test.txt")
txt <- "在"
writeLines(txt, "test.txt")
??writeLines
# 将修改后的内容写回文件
cat(new_content, newRmd)
cat(new_content, file = newRmd)
# 将修改后的内容写回文件
writeLines(new_content, newRmd)
# 将修改后的内容写回文件
writeLines(new_content, newRmd)
options(encoding ="UTF-8")
new_content
# 将修改后的内容写回文件
writeLines(new_content, newRmd)
# library(xlsx)
Metal <- c("铝","镉","铬","铅")
TCM <- c("黄芪","金银花","鸡内金")
for (metal in Metal) {
for (herb in TCM) {
currRmd <- "template.Rmd"
newRmd <- paste(metal, "-", herb, ".Rmd", sep = "")
file.copy(currRmd, newRmd, overwrite = TRUE)
content <- readLines(newRmd, encoding = "UTF-8")
# 找到第三个 newpage 的位置
newpage_indices <- grep("newpage", content)
third_newpage_index <- newpage_indices[3]
# 在第三个 newpage 之后添加 r child 新模块
# 在第三个 newpage 之后添加 r child 新模块
new_content <- c(content[1:third_newpage_index],
paste0("\n```{r child = '", herb, "介绍.Rmd'}\n"),
"```",
paste0("\n```{r child = '", metal, "的危害表征.Rmd'}\n"),
"```",
content[(third_newpage_index + 1):length(content)])
# 将修改后的内容写回文件
writeLines(new_content, newRmd)
# 渲染RMD文件并导出Word文件
# srcfile <- newRmd
# outdoc <- paste(metal, "-", herb, ".docx", sep = "")
# rmarkdown::render(input = srcfile, output_format = "word_document", output_file = outdoc)
}
}
new_content
content <- readLines(newRmd, encoding = "UTF-8")
content
content <- readLines(newRmd)
content
currRmd <- "template.Rmd"
newRmd <- paste(metal, "-", herb, ".Rmd", sep = "")
file.copy(currRmd, newRmd, overwrite = TRUE)
content <- readLines(newRmd)
content
# 找到第三个 newpage 的位置
newpage_indices <- grep("newpage", content)
third_newpage_index <- newpage_indices[3]
# 在第三个 newpage 之后添加 r child 新模块
# 在第三个 newpage 之后添加 r child 新模块
new_content <- c(content[1:third_newpage_index],
paste0("\n```{r child = '", herb, "介绍.Rmd'}\n"),
"```",
paste0("\n```{r child = '", metal, "的危害表征.Rmd'}\n"),
"```",
content[(third_newpage_index + 1):length(content)])
new_content
# 将修改后的内容写回文件
writeLines(new_content, newRmd)
Metal <- c("铝","镉","铬","铅")
TCM <- c("黄芪","金银花","鸡内金")
for (metal in Metal) {
for (herb in TCM) {
currRmd <- "template.Rmd"
newRmd <- paste(metal, "-", herb, ".Rmd", sep = "")
file.copy(currRmd, newRmd, overwrite = TRUE)
content <- readLines(newRmd)
# 找到第三个 newpage 的位置
newpage_indices <- grep("newpage", content)
third_newpage_index <- newpage_indices[3]
# 在第三个 newpage 之后添加 r child 新模块
# 在第三个 newpage 之后添加 r child 新模块
new_content <- c(content[1:third_newpage_index],
paste0("\n```{r child = '", herb, "介绍.Rmd'}\n"),
"```",
paste0("\n```{r child = '", metal, "的危害表征.Rmd'}\n"),
"```",
content[(third_newpage_index + 1):length(content)])
# 将修改后的内容写回文件
writeLines(new_content, newRmd)
# 渲染RMD文件并导出Word文件
# srcfile <- newRmd
# outdoc <- paste(metal, "-", herb, ".docx", sep = "")
# rmarkdown::render(input = srcfile, output_format = "word_document", output_file = outdoc)
}
}
